-------------------
文本属性
-------------------
	text-indent
		* 把元素的第一行文本，缩进指定的长度，甚至可以是负值。
		* 如果是百分比的话，则是相对于父元素的宽度进行计算的。
		* 只能用在块级元素上，会继承。
	
	color
		* 设置字体颜色
	
	letter-spacing
		* 字符间距，可以设置负数
	
	word-spacing
		* 词间距，其实是根据空格来区分是否是单词。

	white-space
	 	* 设置如何处理元素内的空白字符
		* 可选值
							换行符	空格和制表符	文本换行	行末空格	行末的其他空白分隔符
			normal			合并	合并			换行		移除		挂起
			nowrap			合并	合并			不换行		移除		挂起
			pre				保留	保留			不换行		保留		不换行
			pre-wrap		保留	保留			换行		挂起		挂起
			pre-line		保留	合并			换行		移除		挂起
			break-spaces	保留	保留			换行		换行		换行

		* 参考
			https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space

	text-shadow
		* 设置阴影
			text-shadow: h-shadow v-shadow blur color;
		
		* 可以同时设置多组阴影，声明多组属性，建议换行分割

		* 值
			<color>
				* 可选。阴影的颜色。可以在偏移量之前或之后指定。如果没有指定颜色，则使用用户代理自行选择的颜色，因此需要跨浏览器的一致性时，应该明确定义它。

			<offset-x> <offset-y>
				* 必选。这些 <length> 值指定阴影相对文字的偏移量。
				* <offset-x> 指定水平偏移量，若是负值则阴影位于文字左侧。<offset-y> 指定垂直偏移量，若是负值则阴影位于文字上方。如果两者均为 0，则阴影位于文字正后方，如果设置了 <blur-radius> 则会产生模糊效果。

			<blur-radius>
				* 模糊值，可选。这是 <length> 值。如果没有指定，则默认为 0。值越大，模糊半径越大，阴影也就越大越淡（wider and lighter）。
		
		* 参考
			https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow
	
	text-overflow
		* 设置文本溢出后的处理方式
		* 可选值
			clip
				* 默认值。这个关键字会在内容区域的极限处截断文本，因此可能会在单词的中间发生截断。
				* 如果你的目标浏览器支持 text-overflow: ''，为了能在两个单词过渡处截断，你可以使用一个空字符串值（''）作为 text-overflow 属性的值。

			ellipsis
				* 这个关键字会用一个省略号（'…'、U+2026 HORIZONTAL ELLIPSIS）来表示被截断的文本。
				* 这个省略号被添加在内容区域中，因此会减少显示的文本。如果空间太小以至于连省略号都容纳不下，那么这个省略号也会被截断。

		* 注意：要使得 text-overflow 属性生效，块容器必须显式定义 overflow 为非 visible 值， white-space 为 nowrap 值。

	word-wrap
		* 目前它已被更名为 overflow-wrap，word-wrap 相当于其别称。
		* 应用于行级元素，用来设置浏览器是否应该在一个本来不能断开的字符串中插入换行符，以防止文本溢出其行向盒。
		* 与 word-break 相比，overflow-wrap 仅在无法将整个单词放在自己的行而不会溢出的情况下才会产生换行。

	text-decoration
		* 它是如下属性的简写
			text-decoration-color
				* 颜色

			text-decoration-line
				* 线条格式
					overline
						* 上划线
					underline
						* 下划线
					line-through
						* 删除线
			text-decoration-style
				* 线条类型
					dotted
						* 虚线
					wavy
						* 波浪线

			text-decoration-thickness
				* 指定当上划线和下划线经过字形上升部和下降部时如何渲染
				* 可选值
					none
					auto
					all

		* 参考
			https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-decoration
	
	word-break
		* 怎样在单词内断行
		* 可选值

			normal
				* 使用默认的断行规则。

			break-all
				* 允许在单词内换行。

			keep-all
				* 只能在半角或连字符处换行。

			break-word 已弃用
				* 他的效果是word-break: normal 和 overflow-wrap: anywhere 的合，不论 overflow-wrap的值是多少。
		

	text-align
		* 文本水平对齐方式
		* 可选值
			justify
				* 两端对齐，两端对齐的文本会经过拉伸，正好占满左右边界之间的空间，至于如何拉伸是由用户代理决定的，和用户代理没有关系。

	user-select
		* 控制用户是否可以选择文本。
		* 可选值
			none
				* 禁止选取
			
			auto
				* auto 的具体取值取决于一系列条件，具体如下：

					在 ::before 和 ::after 伪元素上，采用的属性值是 none
					如果元素是可编辑元素，则采用的属性值是 contain
					否则，如果此元素的父元素的 user-select 采用的属性值为 all，则该元素采用的属性值也为 all
					否则，如果此元素的父元素的 user-select 采用的属性值为 none，则该元素采用的属性值也为 none
					否则，采用的属性值为 text
			
			text
				* 可选值
			
			all
				* 只能选取全部文字。如果双击子元素，那么被选取的部分将是以该子元素向上回溯的最高祖先元素。
			
			contain
				* 允许在元素内选择；但是，选区将被限制在该元素的边界之内。
				*  CSS UI 4 将 element 值重命名为 contain。

-------------------
行高 / 字体大小
-------------------
	# 字体设计框，这个只有在字体设计软件中才有，它实实在在存在，但是在浏览器和 CSS 中，看不到、摸不到。

		* font-size 的大小，本质上就是在控制这个字体框的高度（宽度会自动等比例缩放）。
		* 字体设计框中的字体，可能会超出字体框的边界，这是允许的，所以，文字最终呈现的大小不一定就是 font-size 的大小
		* 通常，文字相对于字体框都不是垂直居中的，而是略微偏下

	# 设计师设计字体的时候，通常会先确定一个字母 'x'（小写），字母 x 的下边缘（线）就是基线（基准线）。

		* 内联元素默认是基线对齐的，而基线就是x的底部。

	# line-height
		* 行高（也称为行间距），指的是两行文字基线（文字母x的下端沿）之间的距离，又可以称为这行文字所占的高度。
		* 可选值如下（不能用负值）
			normal
				* 默认，浏览器会根据字体大小给一个合适的行高。
			<number>（无单位）
				* <number>（无单位）乘以该元素的字体大小。推荐使用（1.2 - 1.5）
				* 继承的时候，继承的是这个表达式
			<length>
				* 指定用于计算行向盒高度的<长度>值。以 em 为单位的值可能会产生不确定的结果。
			<percentage>
				* 百分比，与元素自身的字体大小有关。计算值是给定的百分比值乘以元素计算出的字体大小
				* 类似于 <number>，但是继承的时候，继承的是计算后的值
		
		* ex
			* 是CSS中的一个相对单位，指的就是 x-height（小写字母x的高度）。
			* 使用 ex 可以实现不受字体和字号影响的内联元素的垂直居中对齐效果。
				
				<div>
					张鑫旭<i class="icon-arrow"></i>
				</div>
				.icon-arrow {
					display: inline-block;
					width: 20px;
					height: 1ex;
					background: url(/images/5/arrow.png) no-repeat center;
				}

		* 其实是由三部分组成，行高实际上修改的是上下间距
			1. 上间距
			2. 文本高度（不会变）
			3. 下间距
		
		* 上下间距平分行高（几乎）
		* 如果要实现文字在容器中上下居中，可以把行高设置为容器高度
			height: 50px;
			line-height: 50px;

			* 本质上是行高的上间距和下间距把文字挤到了中间。
			* 如果行高小于盒子高度，文字会偏上
			* 如果行高大于盒子高度，文字会偏下

	# vertical-align
		* 文本垂直对齐方式
		* 用来指定行内（inline）、行内区块（inline-block）、表格单元格（table-cell）盒子的垂直对齐方式。
		* 可选值

			/* 相对父元素的值 */
			baseline（默认值）
				* 使元素的基线与父元素的基线对齐。
				* 内联元素默认是基线对齐的。
			
			sub
				* 使元素的基线与父元素的下标基线对齐。
			
			super
				* 使元素的基线与父元素的上标基线对齐。
			
			middle
				* 使元素的中部与父元素的基线加上父元素 x-height （小写x的高度）的一半对齐。
				* 指的是基线往上 1/2 x-height 高度，可以近似理解为字母 x 交叉点那个位置。

			text-top
				* 使元素的顶部与父元素的字体顶部对齐。

			text-bottom
				* 使元素的底部与父元素的字体底部对齐。
			
			<length>
				* 使元素的基线对齐到父元素的基线之上的给定长度。可以是负数。
			
			<percentage>
				* 使元素的基线对齐到父元素的基线之上的给定百分比，该百分比是 line-height 属性的百分比。可以是负数。
			

			/* 相对行的值，没有基线的元素，使用外边距的下边缘替代。*/
			top
				* 使元素及其后代元素的顶部与整行的顶部对齐。
			
			bottom
				* 使元素及其后代元素的底部与整行的底部对齐。

			
