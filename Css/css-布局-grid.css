---------------------
grid
---------------------
	# 参考地址
		https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout
		https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout/Basic_concepts_of_grid_layout#grid_tracks
		http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html

		https://cssgridgarden.com/

		https://css-tricks.com/snippets/css/complete-guide-grid/
	
	# 和 Flex 布局比
		* 因为 Flexbox 是一维的，所以它很适合用在相似的元素组成的行（或列）上。它支持用 flex-wrap 换行，但是没法让上一行元素跟下一行元素对齐。
		* 相反，网格是二维的，旨在解决一个轨道的元素跟另一个轨道的元素对齐的问题。
		* 当设计要求元素在两个维度上都对齐时，使用网格。当只关心一维的元素排列时，使用Flexbox。
	
	# 容器属性
		grid-template-columns
		grid-template-rows
		grid-template-areas
		grid-template			/* 上面仨属性的简写 */

		grid-auto-columns
		grid-auto-rows
		grid-auto-flow
		grid					/*上面六个属性的简写*/

		justify-items
		align-items
		place-items				/*简写*/

		justify-content
		align-content
		place-content			/* 简写*/

		row-gap
		column-gap
		gap						/* 简写 */


	
	# 元素属性
		grid-row-start
		grid-row-end
		grid-row				/* 简写 */

		grid-column-start
		grid-column-end
		grid-column				/* 简写 */

		grid-area

		justify-self
		align-self
		place-self				/* 简写 */
	
	
	# 函数
		repeat()
		minmax()
		fit-content()

---------------------
grid 基本概念
---------------------
	# 容器
		* 最外层的元素就是容器

	# 项目
		* 项目只能是容器的顶层子元素，不包含项目的子元素

	# 行与列
		* 水平区域称为"行"（row），垂直区域称为"列"（column）

	# 单元格
		* 行和列的交叉区域，称为"单元格"（cell）。

		* 正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。

	# 网格线
		* 划分网格的线，称为"网格线"（grid line）
		* 水平网格线划分出行，垂直网格线划分出列。

		* 正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。


--------------------
容器属性
--------------------
	# 声明容器使用 grid 布局

		display: grid
			* 指定一个容器采用网格布局
			* 块级元素, 宽度默认撑满父容器
		
		display: inline-grid
			* 指定一个容器采用网格布局
			* 行内元素, 元素只会在行内流动, 宽度只能包含子元素
	
		* 设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。
	
	# 行和列的划分
		grid-template-columns
			* 属性定义每一列的 '列宽'
				grid-template-columns: 200px 200px; 
		grid-template-rows
			* 定义每一行的 '行高'
				grid-template-rows: 200px 200px;
		
		
		* 除了使用绝对单位，也可以使用百分比。
			grid-template-rows: 33.33% 33.33% 33.33%;

		* 有时候，重复写同样的值非常麻烦，尤其网格很多时。
		* 可以使用 repeat() 函数，简化重复的值。
			 grid-template-columns: repeat(3, 33.33%);			/* 第一个参数表示重复几次, 第二个参数表示重复的值 */
			 grid-template-columns: repeat(2, 100px 20px 80px) /* 相当于: 100px 20px 80px 100px 20px 80px  */
	

		* 单元格的大小是固定的，但是容器的大小不确定
		* 如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用 auto-fill 关键字（作为第一个参数）表示自动填充。
		* 当容器不能放更多列的时候就会自动换行
			grid-template-columns: repeat(auto-fill, 100px); /* 每列宽度100px，然后自动填充，直到容器不能放置更多的列 */
		
		* 如果网格元素不够填满所有网格轨道，auto-fill 就会导致一些空的网格轨道
		* 如果不希望出现空的网格轨道，可以使用 auto-fit 关键字代替 auto-fill， 它会让非空的网格轨道扩展，填满可用空间
	
		* 二者区别只在于单行时对剩余空间的处理，只有行的宽度大到能够容纳额外的列时，auto-fill 和 auto-fit 这两者的区别才会体现出来。
			* fill 是有足够空间就创建空白列，剩余不到一列时才均分该剩余空间
			* fit 是直接均分剩余空间

		* 按照比例的划分，为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为"片段"）
		* 如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。
			grid-template-columns: 1fr 1fr;  /* 两个相同宽度的列 */
		
		* 如果其中一行行高/列宽变高了撑大了容器，则同行/列的其他元素也会变化

		* fr可以与绝对长度的单位结合使用
			grid-template-columns: 150px 1fr 2fr;  /* 第一列的宽度为150像素，第二列的宽度是第三列的一半。 */
		
		
		* 如果要限制每一列的最大/最小宽度值，用 minmax 函数
		* minmax() 函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值
			grid-template-columns: 1fr 1fr minmax(100px, 1fr);  /* 表示列宽不小于100px，不大于1fr。 */
			grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));/* 每一行尽量容纳更多的列。每一列最低100PX，最高1fr */

		* auto 关键字表示由浏览器自己决定长度
			grid-template-columns: 100px auto 100px; /* 第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。 */
		* columns 的 auto 基本上就是占满格子，rows 的 auto 就是包裹，内容多高就多高
	

		* 可以使用方括号，指定每一根网格线的名字，方便以后的引用
		* 网格布局允许同一根线有多个名字，比如[fifth-line row-5]
			grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];
			grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];		/** 方括号里面依次是这八根线的名字。 **/
		
		* 网格线名称可以一样
			grid-template-rows: repeat(4, [row] auto);	/* 声明了 4 根儿名称为 row 的网格线（水平），除了最后一条 */
		* 对于名称相同的线，可以用数字标识是哪个
			grid-template-columns: repeat(3, [col] 1fr);	/* [col] 1fr [col] 1fr [col] 1fr ：声明了 3 根 名为 col 的垂直的网格线，除了最后一条 */
			grid-column: col 2 / span 1;		/* 从第 2个 col 列开始 */
		
		* 可以使用简写定义行和列
			grid-template: grid-template-rows / grid-template-columns
		

	# 间隔
		row-gap
			* 设置行与行的间隔（行间距）
				grid-row-gap: 20px;
		column-gap
			* 设置列与列的间隔（列间距）
				grid-column-gap: 20px;
		
		gap
			* 行列间距的简写
				gap: <grid-row-gap> <grid-column-gap>;
			* 如果省略了第二个值，浏览器认为第二个值等于第一个值。
		
	
	# 区域
		* 网格布局允许指定"区域"（area），一个区域由单个或多个单元格组成

		grid-template-areas
			* 划分区域
				grid-template-columns: 100px 100px 100px;
				grid-template-rows: 100px 100px 100px;
				grid-template-areas: 'a b c' 
										'd e f' 
										'g h i';	/* 划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。 */
		
		* 多个单元格合并成一个区域(多个单元格名字相同即可)
			grid-template-columns-template-areas: 'a a a' 
													'b b b'
													'c c c'; /* 9个单元格分成a、b、c三个区域。 */
		
		* 如果某些区域不需要利用，则使用"点"（.）表示
			grid-template-areas: 'a . c'
									 'd . f'
				                     'g . i';  /*中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。*/
		

		* 区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为：区域名-start，终止网格线自动命名为：区域名-end。
		* 比如，区域名为 header，则起始位置的水平网格线和垂直网格线叫做 header-start，终止位置的水平网格线和垂直网格线叫做 header-end。

		* 返过来，如果把网格线命名为 xxx-start 和 xxx-end ，就相当于定义了一个名为 xxx 的 area

		* 重复命名的区域不能是 U 形、L 形，只能是矩形，否则无效（即这个属性会被忽略掉）
		* grid-template-areas 的值必须是一个完整的网格，否则无效（即这个属性会被忽略掉）
	
	# 摆放方式
		* 划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格
		* 默认的放置顺序是"先行后列"，即先填满第一行，再开始放入第二行

		grid-auto-flow

			row(默认)
				* 从左到右横着放, 放不下了放到下一行
			
			column
				* 从上往下竖着放, 放不下了放到下一列
			
			row dense
				* 表示 '先行后列'，尽可能紧密填满，尽量不出现空格
			
			column dense
				* 表示 '先列后行'，并且尽量填满空格。
			
		* grid-auto-flow: dense 等价于 grid-auto-flow: row dense。（前者隐含了row，因为初始值就是row。）
		* 紧凑（dense）的 auto-flow 方式会导致元素出现的顺序跟HTML里不一致。当使用键盘（Tab键）或者使用以源码顺序而非以显示顺序为准的屏幕阅读器来浏览网页时，用户可能会感到困惑。

	
	# 单元格内容的水平位置
		justify-items
			* 属性设置单元格内容的水平位置（左中右）
				justify-items: start | end | center | stretch;
		align-items
			* 属性设置单元格内容的垂直位置（上中下）。
				align-items: start | end | center | stretch;
		
		* 枚举值
			start：对齐单元格的起始边缘。
			end：对齐单元格的结束边缘。
			center：单元格内部居中。
			stretch：拉伸，占满单元格的整个宽度（默认值）。

		place-items
			* align-items属性和justify-items属性的合并简写形式
				place-items: <align-items> <justify-items>;
			* 如果省略第二个值，则浏览器认为与第一个值相等。
	
	# 整个内容区域在容器里面的位置
		justify-content
			* 整个内容区域在容器里面的水平位置（左中右）

		align-content
			* 是整个内容区域的垂直位置（上中下）。
		
		place-content
			* align-content属性和justify-content属性的合并简写形式。
				place-content: <align-content> <justify-content>
			* 如果省略第二个值，浏览器就会假定第二个值等于第一个值。
		
		* 枚举值
			start - 对齐容器的起始边框。
			end - 对齐容器的结束边框。
			center - 容器内部居中。
			stretch - 项目大小没有指定时，拉伸占据整个网格容器。
			space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。（容器两边有间隔，列于列之间长度是两边间隔的2倍）
			space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。（容器两边没间隔，列与列之间间隔一样长）
			space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔（所有列间隔一样长）

	
	# 多余的行和列（即隐式网格）
		* 一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。
		* 这时，浏览器会自动生成多余的网格，以便放置项目。

		grid-auto-columns
			* 设置，浏览器自动创建的多余网格的列宽

		grid-auto-rows
			* 设置，浏览器自动创建的多余网格的行高

		
		* 如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。
		* 隐式网格轨道默认大小为 auto，也就是它们会扩展到能容纳网格元素内容。

		* 指定网格线的时候，隐式网格轨道不会改变负数的含义。负的网格线编号仍然是从显式网格的右下开始的。
		* 也可以指定多个值，扩展的时候会按照列表中的值进行扩展
			grid-auto-rows: 100px 200px;

	
	# 子网格（subgrid）
		* 在网格元素上设置 grid-template-columns/grid-template-rows: subgrid，就可以创建嵌套网格
		* 嵌套网格会沿用父网格轨道来布局项目。

	# 属性的简写
		grid-template
			* grid-template-columns、grid-template-rows 和 grid-template-areas 这三个属性的合并简写形式。
		grid 
			* grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow 这六个属性的合并简写形式。
	

--------------------
项目属性
--------------------
	# U 形、L 形不能整，只能是矩形
	# 项目的位置, 可以通过设置四个边框来指定
		grid-column-start
			* 左边框所在的垂直网格线
		grid-column-end
			* 右边框所在的垂直网格线
		grid-row-start
			* 上边框所在的水平网格线
		grid-row-end
			* 边框所在的水平网格线
		
			grid-column-start: 2;
			grid-column-end: 4; 
			/* 这个项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。*/
			/* 没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。 */
		
		* 如果不设置位置，项目摆放位置则依赖容器的 grid-auto-flow 属性值决定
		* 元素会按照其布局算法自动放置。默认情况下，布局算法会按元素在标记中的顺序将其逐列逐行摆放。
		* 当一个元素无法在某一行容纳（也就是说该元素占据了太多网格轨道）时，算法会将它移动到下一行，寻找足够大的空间容纳它
	
		
		* 网格线标识还支持负数, 最后一条是 -1, 依次递减
		* grid-column: 1 / -1;  即可跨域整个网格
		

		* 除了指定为第几个网格线，还可以指定为网格线的名字。
			grid-column-start: header-start;
			grid-column-end: header-end;
		
		
		* 使用span关键字，表示"跨越"，即左右边框（上下边框）之间跨越多少个网格
		* 不指出开始的网格坐标（只用 span 关键字），就会按照网格的布局算法自动放到合适的位置（布局算法会将元素放在网格上可以容纳该元素的第一处可用空间）
			grid-column-start: span 2; /* 边框距离右边框跨越2个网格  */
			grid-row: span 1;

		
		* 使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。

		* 简写
			grid-column
				* grid-column-start和grid-column-end的合并简写形式
					grid-column: 1 / 3;

			grid-row
				* grid-row-start属性和grid-row-end的合并简写形式
					  grid-row: 1 / 2;
			
			* 也可以使用 span 关键字，表示跨越多少个网格。
				grid-column: 1 / span 2;
				grid-row: 1 / span 2;

			* 斜杠以及后面的部分可以省略，默认跨越一个网格
		

		
	# 项目的区域
		grid-area
			* 指定项目放在哪一个区域。
				grid-area: e;
		

		* 还可用作 grid-row-start, grid-column-start, grid-row-end, grid-column-end 的合并简写形式，直接指定项目的位置。

			grid-area: <row-start> / <column-start> / <row-end> / <column-end>;

			grid-area: 1 / 1 / 3 / 3;
		
	
	# 单元格内容的水平位置
		justify-self
			* 设置单元格内容的水平位置（左中右）
			* 和容器的 justify-items 属性的用法完全一致，但只作用于单个项目。

		align-self
			* 设置单元格内容的垂直位置（上中下）
			* 和容器的 align-items 属性的用法完全一致，也是只作用于单个项目。
		
		* 枚举值
			start：对齐单元格的起始边缘。
			end：对齐单元格的结束边缘。
			center：单元格内部居中。
			stretch：拉伸，占满单元格的整个宽度（默认值）。
	
		
		* 简写
			place-self
				* align-self属性和justify-self属性的合并简写形式
					place-self: <align-self> <justify-self>;
				* 如果省略第二个值，place-self属性会认为这两个值相等。
		

				
					



