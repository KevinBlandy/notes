--------------------------
定位
--------------------------
	# position属性的初始值是: static
		* 如果把它改成其他值, 就可以说元素就被定位了(定位元素)
		* 如果是默认值(静态定位), 那么就可以说元素未被定位
	
	
--------------------------
固定定位
--------------------------
	# position: fixed
		* 能将元素放在视口的任意位置

		* 这需要搭配四种属性一起使用: top, right, bottom, left
		* 这些属性的值决定了固定定位的元素与浏览器视口边缘的距离

		* 设置这四个值还隐式地定义了元素的宽高
			* 比如指定 left: 2em; right: 2em 表示元素的左边缘距离视口左边2em, 右边缘距离视口右边2em
			* 因此元素的宽度等于视口总宽度减去4em, top, bottom和视口高度也是这样的关系
		
	
	# 控制定位元素的大小
		* 定位一个元素时, 不要求指定四个方向的值, 可以只指定需要的方向值, 然后用width和/或height来决定它的大小
		* 也可以让元素本身来决定大小
			position: fixed;
			top: 1em;
			right: 1em;
			width: 20%
			/* 元素放在距离视口顶部和右边1em的位置，宽度为视口宽度的20% */
			/* 它省略了bottom和height属性，元素的高度由自身的内容决定 */


--------------------------
绝对定位
--------------------------	
	# position: absolute
	# 固定定位的包含块是视口, 而绝对定位的包含块是: 相对最近的祖先定位元素
		* 跟固定元素一样, 属性top, right, bottom, left决定了元素的边缘在包含块里的位置

		* 如果父元素未被定位, 那么浏览器会沿着DOM树往上找它的祖父, 曾祖父, 直到找到一个定位元素, 用它作为包含块.
		* 如果祖先元素都没有定位, 那么绝对定位的元素会基于初始包含块（initial containing block）来定位, 初始包含块跟视口一样大, 固定在网页的顶部.


--------------------------
相对定位
--------------------------
	# position: relative
	# 跟固定或者绝对定位不一样, 不能用top、right、bottom和left改变相对定位元素的大小
		* 这些值只能让元素在上, 下, 左, 右方向移动
		* 可以用top或者bottom, 但它们不能一起用(bottom会被忽略)
		* 可以用left或right, 但它们也不能一起用(right会被忽略)
	


--------------------------
层叠上下文 & zindex
--------------------------
	# 渲染过程和层叠顺序
		* 浏览器将HTML解析为DOM的同时还创建了另一个树形结构, 叫作渲染树(render tree)
		* 它代表了每个元素的视觉样式和位置, 同时还决定浏览器绘制元素的顺序
		* 顺序很重要, 因为如果元素刚好重叠, '后绘制的元素就会出现在先绘制的元素前面'

		
	# 使用定位之前(通常情况)
		* 元素在HTML里出现的顺序决定了绘制的顺序
	
	# 使用定位
		* 使用定位元素时, 这种行为会改变
		* 浏览器会先绘制所有非定位的元素, 然后绘制定位元素, 默认情况下, 所有的定位元素会出现在非定位元素前面
		
		* 多个定位元素之间, 还是遵循基于源码的层叠的关系, 后来居上
	
	# z-index: 控制层叠顺序
		* 固定定位元素放在HTML中哪里都合适(标记位置一般是在</body>之前)

		* 相对定位或绝对定位的元素, 通常无法用改变标记位置的方法解决层叠问题
		* 相对定位依赖于文档流, 绝对定位元素依赖于它的定位祖先节点

		* z-index属性值可以是正数, 负数
		* 较高index的元素会在较低index值元素的前面, 负index值的元素出现在静态元素后面
	
	
	# 层叠上下文
		* 一个'层叠上下文包'含'一个元素'或者由浏览器一起绘制的'一组元素'
		* 给一个定位元素加上z-index的时候, 它就变成了一个新的层叠上下文的根, 所有后代元素就是这个层叠上下文的一部分

		* 如果一个元素叠放在一个层叠上下文前面, 那么层叠上下文里没有元素可以被拉到该元素前面(层叠上下文之外的元素无法叠放在层叠上下文内的两个元素之间)
		* 同理, 如果一个元素被放在层叠上下文后面, 层叠上下文里没有元素能出现在该元素后面

		* 所有层叠上下文内的元素会按照以下顺序, 从后到前叠放:
			* 层叠上下文的根
			* z-index为负的定位元素(及其子元素)
			* 非定位元素
			* z-index为auto的定位元素(及其子元素)
			* z-index为正的定位元素(及其子元素)
		

--------------------------
粘性定位
--------------------------
	# position:sticky
		* Safari可能需要添加前缀: position: -webkit-sticky
	
		* 它是相对定位和固定定位的结合体
		* 正常情况下, 元素会随着页面滚动, 当到达屏幕的特定位置时, 如果用户继续滚动, 它就会"固定"在这个位置(最常见的用例是侧边栏导航)






		

