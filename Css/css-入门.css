-------------------
css
-------------------

-------------------
css 层叠
-------------------
	# 来源
		* 浏览器默认就有样式
		* 自己写的样式, 可以覆盖浏览器默认的

	# 优先级
		# 2种类型的样式
			* 行内样式, 只作用于当前元素, 权重最高, 会覆盖一切
			* 选择器样式
		
		# 选择器样式优先级
			1. 选择器ID数量越多, 权重越高
			2. 如果ID数量一样, class越多, 权重越高
			3. ID, class一样多, 标签名称越多, 权重越高
			4. 都一样多, 越后面的, 权重越高, 覆盖前面的
			
			* 伪类/属性选择器和class选择器相同
		
		# 优先级的一种标记算法
			* 数值标记法
				0,0,1 // 0个ID, 0个class, 1个tag
				1,0,0 // 1个ID, 0个class, 0个tag
			
			* 通过比较优先级的数值, 就可以确定出最大的选择器
			* 有的还会有4个数值, 用第1个数值0/1来表示是否是内联样式
		
		# !important
			* 最霸道的标识, 标识在哪个样式属性上(行业/选择器样式), 则哪个属性权重就是最高, 覆盖一切
			* 当所有属性都标识了, 那么就没有意义了, 相当于大家都没 !important
	

	# 源码顺序
		* 优先级相同的时候, 最后出现的样式会覆盖先出现的样式
		* 如果一个元素同时处于2个或者更多的状态, 最后一个状态就会覆盖其他状态

		* 顺序口诀: LoVe/HAte
			link
			visited
			hover
			active
		
	
	# 层叠值
		* 经过层次筛选: 来源 -> 优先级 -> 源码顺序, 会得到一个最终值, 这就是层叠值
		* 元素的每一个属性, 只会有一个层叠值
		* 如果元素没有指定属性, 则该元素就没有层叠值
	
	# 法则
		1. 选择器尽量不要使用ID
		2. 属性尽量不要使用 !important
		3. 不要在JS中定义行内样式


-------------------
css 继承
-------------------
	# 如果一个元素的某个属性没有任何层叠值, 则'可能'会继承某个祖先的元素值
	# 只有特定的属性可以被继承: 
		color font font-family font-size font-weight font-variant font-style line-height letter-spacing text-align text-indent text-transform white-space word-spacing
	
		* 列表属性
			list-style list-style-type list-style-position list-style-image
		
		* and so on
	

	# inherit
		* 该值表示: 继承值
		* 指定该属性值从父级元素继承过来
		* 还可以使用inherit关键字强制继承一个通常不会被继承的属性(比如边框和内边距, 通常在实践中很少这么做)

	# initial
		* 该值表示: 初始值
		* 每个css属性都有默认值, 如果把属性值设置为 initial, 就表示该属性复位
			color: initial == color: black /* 在大多数浏览器中，黑色是color属性的初始值 */
		
-------------------
css 简写属性
-------------------
	# 简写属性, 可以同时给多个属性赋值
		* font
			font-style font-weight font-size font-height font-family
		
			// font: italic bold 18px/1.2 "Helvetica", "Arial", sans-serif;
		
		* background
			background-color background-image background-size background-repeat background-position background-origin background-chip background-attachment
		
		* border
			border-width border-style border-color
		
		* border-width
			上 右 下 左
		
	
	# 简写属性会有默认值
		* 简写属性的一堆值, 如果没有设置, 则会有默认值
	
	# 简写值的顺序
		* 浏览器会尝试尽力的包容指定属性值的顺序(尽量猜)
			border: 1px solid black
			border: black 1px solid
			// 以上俩都会生效, 浏览器知道宽度, 颜色, 边框样式分别对应什么值
		
		* 如果属性值比较模糊, 急需要注意顺序问题
		* 四个方向: 上, 右, 下, 左(顺时针)
			* 如果属性值, 有一个没指定, 那么就会取'对面'的值
				padding: 1em 2em 1em;  // 左 = 2em

			* 所以, 如果上下/左右相同, 那么可以只声明2个值
				padding: 1em 2em;
			
			* 如果只指定一个值, 则4个方向都会用
		
		* 两个方向: 垂直, 水平 (不一定谁先)
			background-position: 25% 75% 
			// 先指定了水平方向的右/左属性值, 然后才是垂直方向的上/下属性值

			padding: 1em 2em
			// 先指定了垂直方向的上/下属性值，然后才是水平方向的右/左属性值
	
		
-------------------
css 相对单位
-------------------
	# 相对单位的值, 会根据外部因素变化而发生变化(em/rem)
	# 浏览器会根据相对单位的值计算出绝对值, 称作计算值
		
	# em
		* 适合基于特定的字号(fount-size)进行排版
		* 子元素字体大小的em是相对于父元素字体大小
			.padded {
			  font-size: 16px;         
			  padding: 1em;  // 设置四个内边距为font-size
			}
		
		* 使用 em 定义 fount-size 的时候, 这个font-size是根据继承的字号来计算的
			font-size: 1.2em // 继承的 fount-size * 1.2
		
		* 想把已知的 fount-size 换算为另一个 em
			em = fount-zie / em  // 元素继承的字体是12px, 如果想要一个16px的字体, 父级字号为12px, 则计算结果是16/12 = 1.3333em
			
		* 浏览器必须先计算字号, 然后使用这个计算值去算出其余的属性值
		* 这两类属性可以拥有一样的声明值, 但是计算值不一样
			body {
			  font-size: 16px;
			}

			.slogan {                   
			  font-size: 1.2em;    // 1.2 * 16 = 19.2, 计算值为19.2px       
			  padding: 1.2em;      // 19.2 * 1.2 = 23.04, 计算值为23.04px
			}
		
		* 嵌套使用相同em值(不是1), 导致逐渐变大/小的问题
		* 很好理解, 每一层的em都是根据父级em计算, 所以会产生递增/减的问题
		* 解决这个问题就需要使用 rem
		

	# rem 
		* rem (rootem) 是全部的长度都相对于根元素, 根元素是谁? <html>元素
		* 通常做法是给html元素设置一个字体大小, 然后其他元素的长度单位就为rem
			:root {                  // root伪类等价于类型选择器html(根元素上的em是相对于浏览器默认值的)
			  font-size: 1em;       // 使用浏览器的默认字号(16px)
			}                          

			ul {                        
			  font-size: .8rem;
			}
		
		* 使用 rem, 就算是再深的嵌套也不怕了, 因为都是相对于根而不是父级 fount-size
	

	# 建议
		* 拿不准的时候, 用rem设置字号. 用px设置边框, 用em设置其他大部分属性

	
	# 视口相对单位
		* 浏览器窗口里网页可见部分的边框区域。它不包括浏览器的地址栏, 工具栏, 状态栏
			vh 视口高度的1/100
			vw 视口宽度的1/100
			vmin 视口宽, 高中较小的一方的1/100（IE9中叫vm，而不是vmin）
			vmax 视口宽, 高中较大的一方的1/100
			

			// 50vw等于视口宽度的一半，25vh等于视口高度的25%
			// vmin取决于宽和高中较小的一方，这可以保证元素在屏幕方向变化时适应屏幕。在横屏时，vmin取决于高度；在竖屏时，则取决于宽度。

		* 可以作为字号单位
			font-size: 2vw // 在一个1200px的桌面显示器上，计算值为24px（1200的2%）。在一个768px宽的平板上，计算值约为15px（768的2%）
		

		* 使用calc()定义字号, 该函数可以对字号进行+-*/运算(操作符后面要记得添加空格)
			font-size: calc(0.5em + 1vw); 
		

-------------------
css 无单位数值
-------------------
	# 有些属性允许无单位数值(不带单位的值)
		line-height z-index font-weight
	
	# 任何长度单位的0值, 都可以无单位
		0px
		0em
		0rem
	
		* 一个无单位的0只能用于长度值和百分比，比如内边距、边框和宽度等
		* 而不能用于角度值，比如度，或者时间相关的值，比如秒。
	
	# line-height属性比较特殊
		* 它的值既可以有单位也可以无单位

		* 通常该使用无单位的数值, 因为他们的继承方式不一样

		* 当一个元素的值定义为长度(px, em, rem等等)时, 子元素会继承它的计算值

			// 无单位
			body {
			  line-height: 1.2;   // 后代元素继承了无单位的值
			}                        
			.about-us {
			  font-size: 2em;  // 2 * 16 * 1.2 = 38.4
			}
			
			// 有单位
			body {    
			  line-height: 1.2em;    // 后代元素继承了表达式计算后的值19.2px(1.2 * 16 = 19.2px), 而不是表达式值
			}                          

			.about-us {
			  font-size: 2em;  // 计算值为32px(2 * 16)
			}
		
		* 使用无单位的数值时, 继承的是声明值, 即在每个继承子元素上会重新算它的计算值。这样得到的结果几乎总是我们想要的。


-------------------
css 自定义变量
-------------------
	# 自定义css变量
		* 变量名前面必须有两个连字符(--), 用来跟CSS属性区分, 剩下的部分可以随意命名
			root {
			  --main-font: Helvetica, Arial, sans-serif; // --main-font 变量名称
			}
		
	
	# 使用自定义的css变量
		* 通过var函数, 引用变量
			p {
			  font-family: var(--main-font);
			}

		* var()函数接受第二个参数, 它指定了备用值, 如果第一个参数指定的变量未定义, 那么就会使用第二个值.
			font-family: var(--main-font, sans-serif);  
		

		* 如果var()函数算出来的是一个非法值, 对应的属性就会设置为其初始值
			padding: var(--brand-color) // 如果变量算出来是一个颜色, 它就是一个非法的内边距值. 这种情况下, 内边距会设置为0.
		
	
	# 动态改变自定义属性
		* 使用自定义变量的属性可以被层叠, 继承
		* 子元素继承了'使用自定义变量'的属性, 那么子元素可以修改自定义变量的值, 来达到修改继承值的效果
	
	# 使用JS修改自定义变量属性
		var rootElement = document.documentElement;
		var styles = getComputedStyle(rootElement);   // 获取一个元素的styles对象
		var mainColor = styles.getPropertyValue('--main-bg');  //  获取styles对象的--main-bg值
		console.log(String(mainColor).trim());   // 确保mainColor是一个字符串，并去掉前后空格；打印结果为“#fff”
	


