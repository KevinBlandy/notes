---------------------------------
地理空间索引
---------------------------------
	# MongoDB 有两种类型的地理空间索引：2dsphere 和 2d。
		* 2d sphere 索引，可以与基于 WGS84 基准的地球球面几何模型一起使用。这个基准将地球表面模拟成一个扁圆球体，这意味着在两极会比较扁。
		* 因此，使用 2dsphere 索引的距离计算考虑到了地球的形状，提供了比 2d 索引更准确的距离处理，比如计算两个城市之间的距离。
		
		* 2d 索引，在存储二维平面上的点时使用。
	
	# 2dsphere 允许以 GeoJSON 格式指定点、线和多边形这些几何图形。
		
		* 一个点由一个二元数组给出，表示 [经度, 纬度 ]（[longitude,latitude]）：

			{
				"name" : "New York City",
				"loc" : {
					"type" : "Point",	// 点
					"coordinates" : [50, 2]
				}
			}
		
		*  线用一个由点组成的数组来表示：

			{
				"name" : "Hudson River",
				"loc" : {
					"type" : "LineString",	// 面
					"coordinates" : [[0,1], [0,2], [1,2]]
				}
			}
		
		* 多边形（面）的表示方式与线（由点组成的数组）一样，但是 "type" 不同：

			{
				"name" : "New England",
				"loc" : {
					"type" : "Polygon",		// 多边形？
					"coordinates" : [[[0,1], [0,2], [1,2], [0,1]]]
				}
			}
		

		* Geo 对象的名称可以自定义，但是 Geo 对象的字段是固定必须的（type 和 coordinates）。
		* 在 createIndex 中使用 "2dsphere" 类型来创建一个地理空间索引

			db.openStreetMap.createIndex({"loc" : "2dsphere"})
		
	
---------------------------------
地理空间查询的类型
---------------------------------

	# 有 3 种类型的地理空间查询：交集（intersection）、包含（within）和接近（nearness）。
		
		// 先定义一个由多个地理位置组成的多边形，用于查询
		var eastVillage = {
			"type" : "Polygon",
			"coordinates" : [
			[
				[ -73.9732566, 40.7187272 ],		// 起点
				[ -73.9724573, 40.7217745 ],
				[ -73.9717144, 40.7250025 ],
				[ -73.9714435, 40.7266002 ],
				[ -73.975735, 40.7284702 ],
				[ -73.9803565, 40.7304255 ],
				[ -73.9825505, 40.7313605 ],
				[ -73.9887732, 40.7339641 ],
				[ -73.9907554, 40.7348137 ],
				[ -73.9914581, 40.7317345 ],
				[ -73.9919248, 40.7311674 ],
				[ -73.9904979, 40.7305556 ],
				[ -73.9907017, 40.7298849 ],
				[ -73.9908171, 40.7297751 ],
				[ -73.9911416, 40.7286592 ],
				[ -73.9911943, 40.728492 ],
				[ -73.9914313, 40.7277405 ],
				[ -73.9914635, 40.7275759 ],
				[ -73.9916003, 40.7271124 ],
				[ -73.9915386, 40.727088 ],
				[ -73.991788, 40.7263908 ],
				[ -73.9920616, 40.7256489 ],
				[ -73.9923298, 40.7248907 ],
				[ -73.9925954, 40.7241427 ],
				[ -73.9863029, 40.7222237 ],
				[ -73.9787659, 40.719947 ],
				[ -73.9772317, 40.7193229 ],
				[ -73.9750886, 40.7188838 ],
				[ -73.9732566, 40.7187272 ]		// 终点和起点一样，形成一个多边形
			]
		]}


	# 使用 "$geoIntersects" 运算符找出与查询位置相交的文档
		
		db.openStreetMap.find({"loc" : {"$geoIntersects" : {"$geometry" : eastVillage}}})

	# 使用 "$geoWithin" 来查询完全包含在某个区域中的文档
		
		db.openStreetMap.find({"loc" : {"$geoWithin" : {"$geometry" : eastVillage}}})

	# 使用 "$geoNear" 来查询附近的位置
		
		db.openStreetMap.find({"loc" : {"$geoNear" : {"$geometry" : eastVillage}}})

		* "$geoNear" 是唯一隐含了排序操作的地理空间运算符，"$geoNear" 的结果总是按照距离由近及远的顺序返回。

---------------------------------
使用地理空间索引
---------------------------------


---------------------------------
复合地理空间索引
---------------------------------


---------------------------------
2d 索引
---------------------------------
	* 对于非球面地图（电子游戏地图、时间序列数据等），可以使用 2d 索引代替 2dsphere 索引
	* 2d 索引适用于完全平坦的表面，而不是球体表面。因此，2d 索引不应该用于球体表面，除非你不介意在极点周围产生明显的扭曲变形。
