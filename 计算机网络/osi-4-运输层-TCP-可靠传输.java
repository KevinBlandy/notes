--------------------
TCP - 可靠传输
--------------------
	# 停止等待协议
		* ​“停止等待” 就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。
	
		* 超时重传
			* 超时重传：发送方只要超过了一段时间仍然没有收到确认，就认为刚才发送的分组丢失了，因而重传前面发送过的分组。
			* 在每发送完一个分组设置一个超时计时器。如果在超时计时器到期之前收到了对方的确认，就撤销已设置的超时计时器。

			1. 发送完一个分组后，必须暂时保留已发送的分组的副本（为发生超时重传时使用）​。只有在收到相应的确认后才能清除暂时保留的分组副本。
			2. 分组和确认分组都必须进行编号。这样才能明确是哪一个发送出去的分组收到了确认，而哪一个分组还没有收到确认。
			3. 超时计时器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。
		

		* 自动重传请求ARQ (Automatic Repeat reQuest)
			* 确认丢失
				1. sender 发送出去分组，receiver 收到后返回 ACK
				2. 但是由于某些原因，sender 没有及时收到 ACK，分组超时，sender 再次发送分组
				3. receiver 再次收到相同的分组，进行两个操作
					1. 丢弃重复的分组，不向上层交付
					2. 再次返回这个分组的 ACK
				
			
			* 确认迟到
				1. receiver 收到后分组后返回 ACK(1)
				2. 但是由于某些原因，sender 没有及时收到 ACK，分组超时，sender 再次发送分组
				3. receiver 收到重复的分组后返回 ACK(2)
				4. sender 这次收到了 ACK(2)，于是继续发送下一个分组
				5. 突然，第一次返回的 ACK(1) 现在才到达（迟到的ACK），sender 直接丢弃它。
	
		
		* 信道利用率
			* 停止等待协议的优点是简单，但缺点是信道利用率太低
		
	
	# 流水线传输
		* 流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。
		* 这样可使信道上一直有数据不间断地在传送。显然，这种传输方式可以获得很高的信道利用率。


		* 连续 ARQ 协议
			1. 发送方同时发送 N 个分组，不必逐个等待确认
			2. 每收到一个 ACK，则窗口向前移动一个分组位置，也就是说可以发送下一个分组
			3. 接收方采用累计确认，也就是说不是逐个确认分组，而是在收到几个分组后，对按序到达的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已正确收到了。
		
		* 累计确认，有点是容易实现

---------------------
滑动窗口
---------------------
	# 滑动窗口是以字节为单位
		* 有点像是 ByteBuffer

	# 发送窗口
			P1					p2		  p3
			|					|		  |	-> 后面的数据，都不允许发送
		+---------------------------------------------------------+
		| 1 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21|
		+---------------------------------------------------------+

		* 根据对方发送过来的确认报文，可以确定自己的发送窗口。
			p1 ACK		=	窗口后沿，接收方 ACK 的序号为 11
			p2 已发送	=   已经发送到网络的字节
			p3 Window	=	可以发送的字节数，即窗口大小，6 字节。
			
			p1 - p3：发送方的发送窗口，又称为通知窗口
			p1 - p2：已发送但是没有 ACK 的数据
			p2 - p3：还允许发送，但是还没发送出去的数据，又称为可用窗口或有效窗口


	# 接收窗口
		* 如果接收方收到了乱序数据，在 ACK 的时候也只能 ACK 最低的序号的数据。
		* 对于不按序到达的数据应如何处理，TCP标准并无明确规定。如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利（因为发送方会重复传送较多的数据）​。
		* 因此TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。

---------------------
超时重传
---------------------
	# 超时重传时间的确定
		
		* 果把超时重传时间设置得太短，就会引起很多报文段的不必要的重传，使网络负荷增大。
		* 但若把超时重传时间设置得过长，则又使网络的空闲时间增大，降低了传输效率。

		* TCP采用了一种自适应算法
	
---------------------
选择确认 SACK
---------------------
	# 选择确认(Selective ACK)
		* 收到的报文段无差错，只是未按序号，中间还缺少一些序号的数据，只传送缺少的数据而不重传已经正确到达接收方的数据。
		* FC 2018规定，如果要使用选择确认SACK，那么在建立 TCP 连接时，就要在TCP首部的选项中加上“允许SACK”的选项，而双方必须都事先商定好。

		* SACK 文档并没有指明发送方应当怎样响应 SACK。因此大多数的实现还是重传所有未被确认的数据块。
	

	

		