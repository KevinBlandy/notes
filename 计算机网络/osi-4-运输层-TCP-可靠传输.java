---------------------
滑动窗口
---------------------
	# 滑动窗口是以字节为单位
		* 有点像是 ByteBuffer

	# 发送窗口
			P1					p2		  p3
			|					|		  |	-> 后面的数据，都不允许发送
		+---------------------------------------------------------+
		| 1 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21|
		+---------------------------------------------------------+

		* 根据对方发送过来的确认报文，可以确定自己的发送窗口。
			p1 ACK		=	窗口后沿，接收方 ACK 的序号为 11
			p2 已发送	=   已经发送到网络的字节
			p3 Window	=	可以发送的字节数，即窗口大小，6 字节。
			
			p1 - p3：发送方的发送窗口，又称为通知窗口
			p1 - p2：已发送但是没有 ACK 的数据
			p2 - p3：还允许发送，但是还没发送出去的数据，又称为可用窗口或有效窗口


	# 接收窗口
		* 如果接收方收到了乱序数据，在 ACK 的时候也只能 ACK 最低的序号的数据。
		* 对于不按序到达的数据应如何处理，TCP标准并无明确规定。如果接收方把不按序到达的数据一律丢弃，那么接收窗口的管理将会比较简单，但这样做对网络资源的利用不利（因为发送方会重复传送较多的数据）​。
		* 因此TCP通常对不按序到达的数据是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。

---------------------
超时重传
---------------------
	# 超时重传时间的确定
		
		* 果把超时重传时间设置得太短，就会引起很多报文段的不必要的重传，使网络负荷增大。
		* 但若把超时重传时间设置得过长，则又使网络的空闲时间增大，降低了传输效率。

		* TCP采用了一种自适应算法
	
---------------------
选择确认 SACK
---------------------
	# 选择确认(Selective ACK)
		* 收到的报文段无差错，只是未按序号，中间还缺少一些序号的数据，只传送缺少的数据而不重传已经正确到达接收方的数据。
		* FC 2018规定，如果要使用选择确认SACK，那么在建立 TCP 连接时，就要在TCP首部的选项中加上“允许SACK”的选项，而双方必须都事先商定好。

		* SACK 文档并没有指明发送方应当怎样响应 SACK。因此大多数的实现还是重传所有未被确认的数据块。
	

	

		