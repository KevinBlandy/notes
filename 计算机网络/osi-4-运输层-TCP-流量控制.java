-------------------------------
利用滑动窗口实现流量控制
-------------------------------
	# 流量控制(flow control)
		* 就是让发送方的发送速率不要太快，要让接收方来得及接收。
		* 利用滑动窗口机制可以很方便地在TCP连接上实现对发送方的流量控制。
	
	
	# 持续计时器
		* 如果 Receiver 给 Sender 推送了零窗口的报文后不久，Receiver 的接收缓存又有了一些存储空间。
		* 于是 Receiver 向 Sender 发送了 rwnd = 400 的报文段（还能再来 400 数据）。
		* 但是这个报文在传输过程中丢失了
		* Sender 一直等待收到 Receiver 发送的非零窗口的通知，而 Receiver 也一直等待 Sender 发送的数据。
		* 如果没有其他措施，这种互相等待的死锁局面将一直延续下去。

		* 为了解决这个问题，TCP 为每一个连接设有一个持续计时器(persistence timer)。
		* 只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。
		* 若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带1字节的数据）​，而对方就在确认这个探测报文段时给出了现在的窗口值。
		* 如果窗口仍然是零，那么收到这个报文段的一方就重新设置持续计时器。如果窗口不是零，那么死锁的僵局就可以打破了。

-------------------------------
传输效率
-------------------------------
	
	# TCP支持推送(push)
		* TCP 数据报 PSH 字段。
	
	# Nagle 算法
		* 若发送应用进程把要发送的数据逐个字节地送到TCP的发送缓存，则发送方就把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。
		* 当发送方收到对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文段发送出去，同时继续对随后到达的数据进行缓存。
		* 只有在收到对前一个报文段的确认后才继续发送下一个报文段。
		* 当数据到达较快而网络速率较慢时，用这样的方法可明显地减少所用的网络带宽。
		
		* Nagle算法还规定，当到达的数据已达到发送窗口大小的一半或已达到报文段的最大长度时，就立即发送一个报文段。这样做，就可以有效地提高网络的吞吐量。
	
	
