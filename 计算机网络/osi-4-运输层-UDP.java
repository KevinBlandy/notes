------------------------------
UDP
------------------------------
	# 用户数据报协议UDP (User Datagram Protocol) [RFC 768]
		* UDP在传送数据之前不需要先建立连接。远地主机的运输层在收到UDP报文后，不需要给出任何确认。
		* 虽然UDP不提供可靠交付，但在某些情况下UDP却是一种最有效的工作方式。
	
	
	# UDP只在IP的数据报服务之上增加了很少一点的功能
		* 复用和分用的功能以及差错检测的功能

	
	# UDP是面向报文的
		* 发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。
		* 应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。
		* 也就是说，UDP一次交付一个完整的报文。
	

	

	# 协议
		* 格式

			 0      7 8     15 16    23 24    31
			+--------+--------+--------+--------+---------------+
			|     Source      |   Destination   |				|
			|      Port       |      Port       |				|
			+--------+--------+--------+--------+ UDP Header	|
			|     Length      |    Checksum     |				|
			+--------+--------+--------+--------+---------------+
			|									|
			|          data octets ...			|
			+-----------------------------------+
			
			* Source Port 源端口， 2 字节
		
			* Destination Port 目标端口， 2字节
				* 如果接收方 UDP 发现收到的报文中的目的端口号不正确（即不存在对应于该端口号的应用进程）​，就丢弃该报文
				* 并由网际控制报文协议ICMP发送“端口不可达”差错报文给发送方。

			* Length ，报文长度，2 字节
				* 其最小值是8（仅有首部）​。
			
			* Checksum ，校验和 2 字节
				* 检测UDP用户数据报在传输中是否有错。有错就丢弃。。
			
		
		* 伪首部校验
			* UDP用户数据报首部中检验和的计算方法有些特殊。
			* 在计算检验和时，要在 UDP 报文之前增加 12 个字节的伪首部。
			* 所谓“伪首部”是因为这种伪首部并不是UDP用户数据报真正的首部。只是在计算检验和时，临时添加在UDP用户数据报前面，得到一个临时的UDP用户数据报。
			* 检验和就是按照这个临时的UDP用户数据报来计算的。伪首部既不向下传送也不向上递交，而仅仅是为了计算检验和。

				 0      7 8     15 16    23 24    31
				+--------+--------+--------+--------+
				|          source address           |
				+--------+--------+--------+--------+
				|        destination address        |
				+--------+--------+--------+--------+
				|  zero  |protocol|   UDP length    |
				+--------+--------+--------+--------+

				source address 4 字节
					* 源地址

				destination address 4 字节
					* 目标地址

				zero 1 字节
					* 固定 0

				protocol 1 字节
					* 协议，固定 17
				
				UDP length 2 字节
					* UDP 长度
			
			* UDP计算检验和的方法和计算IP数据报首部检验和的方法相似。
			* 但不同的是：IP数据报的检验和只检验IP数据报的首部，但UDP的检验和是把首部和数据部分一起都检验。


			
	# 最大数据
		* 理论上，推荐的 UDP 数据的最大长度为：65507
			65535
				-20 字节 IP 首部长度
				-8 字节 UDP 首部长度 
			= 65507
		

