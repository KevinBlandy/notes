------------------------
浏览器中的事件循环
------------------------
	# 浏览器是多进程/多线程的应用
		* 多进程（主要有三个）
			* 浏览器进程
				* 界面展示、用户交互、子进程管理
			* 网络进程
				* 加载网络资源
			* 渲染进程(重点)
				* 每个标签页会有一个渲染进程
				* 渲染进程启动后，会有一个渲染主线程，负责执行 HTML、CSS、JS 代码
	
	# 渲染主线程
		* 最繁忙的线程，任务包括但不限于：
			1. 解析 HTML
			2. 解析 CSS
			3. 计算样式
			4. 布局
			5. 处理图层
			6. 每秒刷新页面 N 次(帧刷新)
			7. 执行全局 JS 代码
			8. 执行事件处理函数
			9. 执行定时调度/回调函数
		
		* 在渲染进程中，渲染主线程只有一个，这也是为啥说 JS 是一门单线程的语言。
		* 通过事件循环机制，来保住主线程的非阻塞执行。
	
	# 事件循环
		* 首先，渲染主线程会轮询事件队列（死循环），如果队列有任务，则取出执行，没有任务则进入休眠状态。
		* 其他所有线程（包括其他进程的线程），都可以随时往事件队列里面添加任务（末尾）。如果主线程处于休眠状态，则唤醒。
		* 任务执行时，如果产生了其他异步任务、回调，都会加入到事件队列，再次等待调度执行。
	
	# 异步任务
		* 定时调度，setTimeout、setInterval
		* 网络请求，XMLHTTPRequest、fetch
		* 事件，addEventListener
	
	# 任务的优先级
		* 每个任务，都有一个 “任务类型” 概念。

		* 谷歌浏览器的实现中，包含了几个队列。

		* 微队列，最高：用户需要最快执行的任务，Promise、MutationObserver
		* 交互队列，高：事件
		* 延时队列，中：定时调度
	

	

	