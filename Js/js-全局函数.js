------------------------
全局函数
------------------------
	# 全局函数是默认在 Global 对象上的，
	
------------------------
全局函数
------------------------
	eval()
		* 接收一个参数，即一个要执行的ECMAScript（JavaScript）字符串。

	isFinite()
		* 判断传入的值是否是有限的数值。如果需要的话，其参数首先被转换为一个数值。

	isNaN() 
		* 判断一个值是否是 NaN。
		* 也可以使用 Number.isNaN() 来判断该值是否为 NaN。

	parseFloat(string)
		* 解析字符串参数，并返回一个浮点数。
		* 跟 parseInt() 函数类似，都是从位置 0 开始检测每个字符，解析到字符串末尾或者解析到一个无效的浮点数值字符为止。
		* 这意味着第一次出现的小数点是有效的，但第二次出现的小数点就无效了，此时字符串的剩余字符都会被忽略，因此，"22.34.5" 将转换成22.34。

		* 它始终忽略字符串开头的零，只解析十进制值，因此不能指定底数


	parseInt(string, radix);

		* 解析字符串参数，并返回指定的基数（基础数学中的数制）的整数。
		* 字符串最前面的空格会被忽略，从第一个非空格字符开始转换。如果第一个字符不是数值字符、加号或减号，parseInt()立即返回 NaN。这意味着空字符串也会返回NaN（这一点跟 Number() 不一样，它返回0）。
		* 如果第一个字符是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符。
			* "1234blue" 会被转换为 1234，因为 "blue" 会被完全忽略。
			* "22.5" 会被转换为 22，因为小数点不是有效的整数字符。
		
		* radix，表示进制的基数（从 2 到 36 的整数）。
		
		* 示例
			let num1 = parseInt("1234blue");   // 1234
			let num2 = parseInt("");             // NaN
			let num3 = parseInt("0xA");         // 10，解释为十六进制整数
			let num4 = parseInt(22.5);          // 22
			let num5 = parseInt("70");          // 70，解释为十进制值
			let num6 = parseInt("0xf");         // 15，解释为十六进制整数

	decodeURI()
		* 对先前经过 encodeURI 函数或者其他类似方法编码过的统一资源标志符（URI）进行解码。

	decodeURIComponent()
		* 对先前经过 encodeURIComponent 函数或者其他类似方法编码的统一资源标志符（URI）进行解码。

	encodeURI()
		* 对整个URI进行编码
		* 不会编码属于URL组件的特殊字符，比如冒号、斜杠、问号、井号

	encodeURIComponent()
		* 用于编码 URI 中单独的组件
		* 会编码所有非标准字符

	escape() 
		* 已弃用
		* 方法生成一个新的字符串，其中的某些字符已被替换为十六进制转义序列。其已被弃用，请使用 encodeURI() 或 encodeURIComponent() 代替。

	unescape() 
		* 已弃用
		* 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。上述的转义序列就像 escape 介绍的一样。其已被弃用，请使用 decodeURI() 或 decodeURIComponent() 替代。