--------------------
document			|
--------------------
	# 分片
		* Primary Shard，主分片，可以理解为分布式，一个索引不同数据存储在不同的节点上
		* Replica Shard，副本分片，可以理解为集群，每一个主分片的完整复制，用于容错，提供负载均衡的查询

		* 主分片数量，在索引创建时就需要确定，后面不能修改(因为涉及到文档的Hash计算落点)，默认是5个主分片
		* 副本分片，可以在索引创建后，根据访问量大小，随意添加/删除
	
	# Document 创建过程
		1. 任意主分片节点接受到索引命令后，会根据文档ID的HASH值，计算出一个落点主分片
		2. 如果主分片在另一个节点，那么当前节点会进行“转发”，这对应用程序来说是透明的
		3. 主分片同步文档到所有的副本分片，在所有可用的副本分片都完成了文档的索引后，索引命令就会返回
	
	# Document 搜索过程
		1. 接受请求的节点，会把请求转发到“一组包含所有数据的分片”
		2. 使用Round-Robin的轮询机制选择可用的分片(主分片/副分片都可以)
		3. 从这些分片收集结果，聚合为单一的回复，响应给客户端

