------------------------
数据类型				|
------------------------

	# 参考
		https://www.sqlite.org/datatype3.html
	

	
	NULL	值是一个 NULL 值
	INTEGER	值是一个带符号的整数,根据值的大小存储在 1,2,3,4,6 或 8 字节中
	REAL	值是一个浮点值,存储为 8 字节的 IEEE 浮点数字
	TEXT	值是一个文本字符串,使用数据库编码(UTF-8,UTF-16BE 或 UTF-16LE)存储，没有大小限制
	BLOB	值是一个 blob 数据，二进制数据

------------------------
亲和(Affinity)类型		|
------------------------
	# SQLite支持列的亲和类型概念,任何列仍然可以存储任何类型的数据
	# 当数据插入时,该字段的数据将会优先采用亲缘类型作为该值的存储方式
	# SQLite目前的版本支持以下五种亲缘类型
		TEXT	数值型数据在被插入之前,需要先被转换为文本格式,之后再插入到目标字段中。
		NUMERIC	当文本数据被插入到亲缘性为NUMERIC的字段中时,如果转换操作不会导致数据信息丢失以及完全可逆,那么SQLite就会将该文本数据转换为INTEGER或REAL类型的数据,如果转换失败,SQLite仍会以TEXT方式存储该数据。对于NULL或BLOB类型的新数据,SQLite将不做任何转换,直接以NULL或BLOB的方式存储该数据。需要额外说明的是,对于浮点格式的常量文本,如"30000.0",如果该值可以转换为INTEGER同时又不会丢失数值信息,那么SQLite就会将其转换为INTEGER的存储方式。
		INTEGER	对于亲缘类型为INTEGER的字段,其规则等同于NUMERIC,唯一差别是在执行CAST表达式时。
		REAL	其规则基本等同于NUMERIC,唯一的差别是不会将"30000.0"这样的文本数据转换为INTEGER存储方式。
		NONE	不做任何的转换,直接以该数据所属的数据类型进行存储。　　

------------------------
Boolean 数据类型		|
------------------------
	#  SQLite 没有单独的 Boolean 存储类
	# 尔值被存储为整数 0(false)和 1(true)
	# 从 3.23.0（2018-04-02）版本开始，SQLite 可以识别关键字 TRUE 和 FALSE，但这些关键字实际上只是整数文字 1 和 0 的替代拼写。


------------------------
Date 与 Time 数据类型	|
------------------------
	# SQLite 没有一个单独的用于存储日期和/或时间的存储类
	# 但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值

	TEXT	格式为 "YYYY-MM-DD HH:MM:SS.SSS" 的日期。
	REAL	从公元前 4714 年 11 月 24 日格林尼治时间的正午开始算起的天数。
	INTEGER	从 1970-01-01 00:00:00 UTC 算起的秒数。
