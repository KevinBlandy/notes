------------------------
Git-入门				|
------------------------
	# SVN:集中式版本控制之王者
	# GIT:分布式版本控制之王者
	# GIT简介
		* 没错,这东西来自于:Linus(Linux之父),又一个伟大的作品
		* 05年,BitKeeper因为不免费了,所以...他们一怒之下弄了这个东西出来
		* Linux,Android,Jquery,Ruby,Debian....都是用GIT管理
	
	# Eclipse上使用GIT的数量已经超过了SVN,特别针对于开源软件
	# 浅谈运用
		* 多用命令行,少整UI.更专业,更牛逼.你会Linux,不要怂.
		* ssh
		* 协同方式
	
	# 学习
		https://learngitbranching.js.org/?locale=zh_CN

------------------------
Git-工作模型			|
------------------------
	# 集中式协同模型
		* 跟SVN差不多一个德行
		* 建立一个服务器,专门用来装代码
		* 所有的开发者可以读,也可以写

	# 社交网络式协同模型
		* Linux经典的开发模型
		* 核心组的哥们儿可以把代码上传到代码服务器
		* 而常规开发人员只能把代码给核心组,或者给其他的开发人员
		* 对于代码服务器上的代码,所有人都可以读
	
	
------------------------
Git-安装				|
------------------------
	# Windows
		Use Git Hash only
		Checkout Windows-style......

------------------------
Git-仓库初始化			|
------------------------
	# 仓库初始化
	git init --bare [目录名字]
		*　在当前所在目录中,建立一个指定名称GIT仓库
	
	# 仓库目录结构
			 config
			 description
			 HEAD
			 hooks
				* 钩子程序
				* 事件,其实就是说我们可以开发一些基于事件的触发程序放里面.来自定义GIT
				* 这里面已经有很多事件存在,如果需要,可以在里面写入触发程序
			 info
				|- exclude
					* 这个文件里面标识的东西,会被GIT忽略,不会做版本控制
			 objects
				* 所有提交的程序,记录的信息都是在这里的
				|-info
				|-pack
			 refs
				* 头文件,分支..之类的
				|-heads
				|-tags
			config
				* 系统配置
			description
				* 描述
			HEAD
				* 
------------------------
Git-仓库克隆			|
------------------------
	git clone [仓库地址] [本地目录]
		* 克隆远程仓库中的数据到本地的目录
	
	# 会在本地目录中生成一个:.git 的隐藏文件

------------------------
Git-一套流程操作		|
------------------------
	git config 
		--system:操作:/etc/gitconfig文件,全局的.对所有用户都生效
		--global	 :操作:~/.gitconfig文件,仅仅对自己生效
		缺省		 :操作仓库:.git/config文件
	
	git config user.name '[用户名]'
	git config user.email '[电子邮箱]'
		# 这个两条命令,会修改本地仓库中的:.git/config文件
		[user]
			name = Kevin
			email = Kevin@qq.com
	
	git add [文件名]
		# 添加文件到版本控制, 其实就是添加到缓存区

	git rm [文件名]
		# 从缓存区删除文件

	git commit [文件名] -m "[备注信息]"
		# 提交到本地仓库
	
	git push origin master
		# 提交到中央仓库
		# 你这个仓库是从哪里Clone的?就会提交到哪个仓库
	
	git pull
		# 从中央仓库更新本地仓库的数据
	

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


------------------------
	Git-暂存区				|
------------------------	


------------------------
Git-Eclipse				|
------------------------
	# 